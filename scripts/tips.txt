GIT_SSL_CAINFO=~/Downloads/111.cer git clone

git config --system http.sslCAInfo ~/Downloads/111.cer # global

git config --system --unset http.sslCAInfo # unset global

git config --unset [key] # Remove repository configuration

git config --global --unset [key] # Remove global configuration

git config --system --unset [key] # Remove system configuration

git config credential.helper store

git config --global credential.helper 'cache --timeout 7200' # git credential save cache store remember password login

git log -p --pretty=format:"%h%x09%an%x09%ad%x09%s" # format date blame

grep --exclude=*node_modules* -rn [key] [directory] # filter exclude

grep -rn [key] [directory] | grep -v *node_modules* # filter

miteru "**/*.php" "**/*.js" "**/*.css" --server --limit 200

DEST="${FILE#PWD}" # bash string replace substring slice

alias ducks="du -cks * | sort -n | head"

alias duke100="du -k * | awk '$1 > 100000' | sort -nr"

bitbake -c clean cross-localedef-native

bitbake -c cleanall cross-localedef-native

bitbake cross-localedef-native

# image img slide demo test interview https://jsbin.com/makiyayugo/edit?html,js,output

while true; do foo; sleep 2; done

while true; do clear; foo; sleep 1; done

count=0; while npm test; do (( count++ )); echo "$count"; done && say Tests have finished

npm config set save-prefix='~' # npm save prefix tilde hat

docker run --name rudolf-production-app-whale --rm --detach --env MONGO_HOST=docker.for.mac.localhost --env PORT=8080 --env STATS_HOST=docker.for.mac.localhost --env CLIENT_ID=whale --publish 8080:8080 rudolf-production-app

docker rm $(docker ps --all -q -f status=exited) # docker remove all exited containers

:%!column -t

:%!sed 's/[A-Z]/ &/'

:%!sort -bk2,2 -k1,1g

# https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file

openssl genrsa -des3 -out server.enc.key 1024 # encrypt private key with passphrase

openssl req -new -key server.enc.key -out server.csr # create CSR ( Certificate Signing Request )

openssl rsa -in server.env.key -out server.key # expose private key from encrypted key

openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt # create certificate

java -Djava.library.path=./DynamoDBLocal_lib -jar DynamoDBLocal.jar -sharedDb # start local dynamo db amazon aws

:vimgrep <select>\_.\{-}<\/select> **       # vimgrep multi line and directory files regex search

/<select\_.\{-}<\/select>       # multi line vim search

<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0">

machine github.com login <token> # .netrc ## generate token with https://help.github.com/articles/creating-an-oauth-token-for-command-line-use

machine github.com \n login technoweenie \n password SECRET # .netrc

pm2 deploy ../../ecosystem.config.js dev exec "echo $APPEND_NETRC \> \~/.netrc"

pm2 deploy dev setup

pm2 deploy dev # https://keymetrics.io/2014/06/25/ecosystem-json-deploy-and-iterate-faster/

pm2 deploy dev exec "echo foo \> \~/bar.txt"

du -a ~ | sort -n -r | head -n 5 # find sort file size

mqtt pub -t 'sensor/get_sensor_config' -m 'foo'

SELECT * FROM "sensor:sensorF" WHERE time > now() - 1w GROUP BY time(1m) fill(none) ORDER BY time desc

SELECT MEAN("wearabs") FROM "sensor:sensorF" WHERE time > now() - 10h GROUP BY time(10m) fill(0) ORDER BY time asc

SELECT "wearabs","location" FROM "sensor:sensorF" WHERE wearabs > 0

SELECT MAX("wearabs") FROM "sensor:sensorF" INTO "temp_max_wearabs" WHERE time > now() - 10h GROUP BY time(10m) fill(0) ORDER BY time asc

var merged = [].concat.apply([], arrays) // merge concat combine arrays ES5

var merged = [].concat( ...arrays ) // merge concat combine arrays ES6

ffmpeg -i input.mp4 -vf fps=10,scale=728:-1:flags=lanczos output.gif # basic gif output with scaling

ffmpeg -y -ss 30 -t 3 -i input.mp4 -vf fps=10,scale=320:-1:flags=lanczos,palettegen palette.png # generate palette, gif

ffmpeg -i input.mp4 -i palette.png -filter_complex "fps=10,scale=320:-1:flags=lanczos[x];[x][1:v]paletteuse" output.gif # output gif using palette

ffmpeg -ss 30 # ffmpeg start time

ffmpeg -ss 30 -t 3 # ffmpeg start time with -t length

find -maxdepth 1 -name "*.flac" -exec ffmpeg -i {} -acodec libmp3lame -ab 128k {}.mp3 \; # convert multiple files to mp3 music

:%bd|e#     # clear vim buffers, #bd = delete all buffers, e# = open last bufffer for editing
:1,100bd    # clear vim buffers
:bufdo bd   # clear buffers

lsof -n -i :3000 | grep LISTEN # find active port ECONN REFUSED

git push origin HEAD # A handy way to push the current branch to the same name on the remote

ctrl-b ctrl-s, ctrl-b ctrl-r # tmux resurrect save restore/load

/server add -auto -network networkname irc.networkname.com 6667 # irssi server auto connect

/network add -nick nickname networkname # irssi auto nick to identify

/channel add -auto #channel networkname # irssi auto join channel

//network add -autosendcmd "/msg nickserv identify password ;wait 2000" networkname # irssi auto identify login

tail -n 0 -f \##japanese.log | trans -s ja -t en -no-auto | cat > \##japanese-translated.log # live translate log

:e ++enc=<encoding> # reload vim encode/encoding utf-8 latin1 iso-8859-15

dstat -ta --top-cpu --noheader --output systemstats.csv # monitor log save top cpu usage to file

ps auxf > auxf.log # monitor log save cpu usage to file

while true; do echo "" >> auxf.log; date >> auxf.log; ps auxf >> auxf.log; tail -n50000 auxf.log | sponge auxf.log; date; sleep 10; done # monitor log save cpu usage to file
